var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
import { bootstrapApplication } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_platform-browser.js?v=8b29cb1e";

// src/app/app.config.ts
import { provideZoneChangeDetection } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { provideRouter } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";

// src/app/pages/home/home.component.ts
import { Component } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { RouterModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";
import * as i0 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i1 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";
var _c0 = () => ["/register"];
var HomeComponent = class _HomeComponent {
  static \u0275fac = function HomeComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _HomeComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ i0.\u0275\u0275defineComponent({ type: _HomeComponent, selectors: [["app-home"]], standalone: true, features: [i0.\u0275\u0275StandaloneFeature], decls: 28, vars: 2, consts: [[1, "account-pages", "mt-5", "mb-5"], [1, "container"], [1, "row", "justify-content-center"], [1, "col-md-8", "col-lg-6", "col-xl-4"], [1, "card"], [1, "card-body", "p-4"], [1, "text-center", "w-75", "m-auto"], [1, "auth-logo"], ["href", "index.html", 1, "logo", "logo-dark", "text-center"], [1, "logo-lg"], ["src", "/images/LOGO ELEGIDO 2019MEMO 549-2020-ANEXO.png", "alt", "", "height", "100"], [1, "mt-3", "text-center"], [1, "text-muted", "mt-2"], [1, "d-grid"], [1, "btn", "btn-danger", "waves-effect", "waves-light", "mt-3", 3, "routerLink"]], template: function HomeComponent_Template(rf, ctx) {
    if (rf & 1) {
      i0.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6)(7, "div", 7)(8, "a", 8)(9, "span", 9);
      i0.\u0275\u0275element(10, "img", 10);
      i0.\u0275\u0275elementEnd()()()();
      i0.\u0275\u0275elementStart(11, "div", 11)(12, "h3");
      i0.\u0275\u0275text(13, "ENTORNOS SEGUROS");
      i0.\u0275\u0275elementEnd();
      i0.\u0275\u0275elementStart(14, "p", 12);
      i0.\u0275\u0275text(15, " Bienvenido al aplicativo de identificaci\xF3n ");
      i0.\u0275\u0275element(16, "br");
      i0.\u0275\u0275text(17, " de infraestructura sostenible y segura. ");
      i0.\u0275\u0275elementEnd();
      i0.\u0275\u0275element(18, "br");
      i0.\u0275\u0275elementStart(19, "p", 12);
      i0.\u0275\u0275text(20, " Gracias por contribuir ");
      i0.\u0275\u0275element(21, "br");
      i0.\u0275\u0275text(22, "en dise\xF1ar una movilidad ");
      i0.\u0275\u0275element(23, "br");
      i0.\u0275\u0275text(24, "sostenible y segura. ");
      i0.\u0275\u0275elementEnd();
      i0.\u0275\u0275elementStart(25, "div", 13)(26, "button", 14);
      i0.\u0275\u0275text(27, " Registrar ");
      i0.\u0275\u0275elementEnd()()()()()()()()();
    }
    if (rf & 2) {
      i0.\u0275\u0275advance(26);
      i0.\u0275\u0275property("routerLink", i0.\u0275\u0275pureFunction0(1, _c0));
    }
  }, dependencies: [RouterModule, i1.RouterLink] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i0.\u0275setClassDebugInfo(HomeComponent, { className: "HomeComponent", filePath: "src\\app\\pages\\home\\home.component.ts", lineNumber: 11 });
})();

// src/app/pages/registro/registro.component.ts
import { Component as Component2 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { NgSelectModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@ng-select_ng-select.js?v=8b29cb1e";
import { CommonModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common.js?v=8b29cb1e";
import { FormsModule, Validators, ReactiveFormsModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_forms.js?v=8b29cb1e";
import { MatRadioModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_material_radio.js?v=8b29cb1e";
import { NgxDropzoneModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/ngx-dropzone.js?v=8b29cb1e";
import { GoogleMapsModule } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_google-maps.js?v=8b29cb1e";

// src/app/shared/models/EntornosSeguro.ts
var EntornosSeguro = class {
  idTipoInfraestructura;
  // Obligatorio
  nombreReferencia;
  // Obligatorio
  latitud;
  // Opcional
  longitud;
  // Opcional
  idEstadoConservacion;
  // Opcional
  idDemandaUsuarios;
  // Opcional
  idNivelSeguridadVial;
  // Opcional
  idNivelSeguridadCiudadana;
  // Opcional
  dni;
  // Obligatorio
  foto;
  // Obligatorio
  foto64bit;
  fechaRegistro;
  // Opcional
  idUsuarioRegistro;
  // Opcional
};

// src/app/pages/registro/registro.component.ts
import * as i07 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";

// src/app/services/facade.service.ts
import { Injectable as Injectable4 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";

// src/app/services/maestros.service.ts
import { Injectable as Injectable2 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { catchError as catchError2 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/rxjs_operators.js?v=8b29cb1e";
import { throwError as throwError2 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/rxjs.js?v=8b29cb1e";
import * as i03 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i13 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common_http.js?v=8b29cb1e";

// src/app/services/metodo.service.ts
import { Injectable } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { HttpHeaders, HttpParams } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common_http.js?v=8b29cb1e";
import { throwError } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/rxjs.js?v=8b29cb1e";
import { catchError } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/rxjs_operators.js?v=8b29cb1e";

// src/enviroments/enviroment.ts
var environment = {
  production: false,
  host: "https://localhost:7264/",
  ItemsPage: 10,
  MAX_SIZE_UPLOAD: 20971520
};

// src/app/services/metodo.service.ts
import * as i02 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i12 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common_http.js?v=8b29cb1e";
var MetodoService = class _MetodoService {
  http;
  constructor(http) {
    this.http = http;
  }
  formatErrors(error) {
    return throwError(error.error);
  }
  POST(path, ipInput, contentType = "application/json") {
    const headers_object = new HttpHeaders({ "Content-Type": contentType });
    const body = JSON.stringify(ipInput);
    console.log("Se ejecut\xF3 => ", `${environment.host}${path}`);
    return this.http.post(`${environment.host}${path}`, body, { headers: headers_object }).pipe(catchError((error) => {
      console.error("Error en POST:", error);
      return throwError(error);
    }));
  }
  GET(path, ipInput = null) {
    if (ipInput == null) {
      return this.http.get(`${environment.host}${path}`).pipe(catchError((error) => {
        console.error("Error en GET:", error);
        return throwError(error);
      }));
    } else {
      const params = new HttpParams().set("ipInput", JSON.stringify(ipInput));
      return this.http.get(`${environment.host}${path}`, { params }).pipe(catchError((error) => {
        console.error("Error en GET:", error);
        return throwError(error);
      }));
    }
  }
  static \u0275fac = function MetodoService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MetodoService)(i02.\u0275\u0275inject(i12.HttpClient));
  };
  static \u0275prov = /* @__PURE__ */ i02.\u0275\u0275defineInjectable({ token: _MetodoService, factory: _MetodoService.\u0275fac, providedIn: "root" });
};

// src/app/services/maestros.service.ts
var MaestrosService = class _MaestrosService {
  http;
  apiService;
  constructor(http, apiService) {
    this.http = http;
    this.apiService = apiService;
  }
  listaDemandaUsuario() {
    return this.apiService.GET("api/DemandaUsuario").pipe(catchError2((error) => {
      console.error("Error en listaDemandaUsuario:", error);
      return throwError2(error);
    }));
  }
  listaEstadoConservacion() {
    return this.apiService.GET("api/EstadoConservacion").pipe(catchError2((error) => {
      console.error("Error en listaEstadoConservacion:", error);
      return throwError2(error);
    }));
  }
  listaNivelSeguridadVial() {
    return this.apiService.GET("api/NivelSeguridadVial").pipe(catchError2((error) => {
      console.error("Error en listaNivelSeguridadVial:", error);
      return throwError2(error);
    }));
  }
  listaNivelSeguridadCiudadana() {
    return this.apiService.GET("api/NivelSeguridadCiudadana").pipe(catchError2((error) => {
      console.error("Error en listaNivelSeguridadCiudadana:", error);
      return throwError2(error);
    }));
  }
  listaTiposInfraestructura() {
    return this.apiService.GET("api/TiposInfraestructura").pipe(catchError2((error) => {
      console.error("Error en listaTiposInfraestructura:", error);
      return throwError2(error);
    }));
  }
  static \u0275fac = function MaestrosService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _MaestrosService)(i03.\u0275\u0275inject(i13.HttpClient), i03.\u0275\u0275inject(MetodoService));
  };
  static \u0275prov = /* @__PURE__ */ i03.\u0275\u0275defineInjectable({ token: _MaestrosService, factory: _MaestrosService.\u0275fac, providedIn: "root" });
};

// src/app/services/entornos-seguro.service.ts
import { Injectable as Injectable3 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i04 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i14 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common_http.js?v=8b29cb1e";
var EntornosSeguroService = class _EntornosSeguroService {
  http;
  apiService;
  constructor(http, apiService) {
    this.http = http;
    this.apiService = apiService;
  }
  crearEntornosSeguro(ipInput) {
    return this.apiService.POST("api/EntornosSeguro", ipInput);
  }
  static \u0275fac = function EntornosSeguroService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _EntornosSeguroService)(i04.\u0275\u0275inject(i14.HttpClient), i04.\u0275\u0275inject(MetodoService));
  };
  static \u0275prov = /* @__PURE__ */ i04.\u0275\u0275defineInjectable({ token: _EntornosSeguroService, factory: _EntornosSeguroService.\u0275fac, providedIn: "root" });
};

// src/app/services/facade.service.ts
import * as i05 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
var FacadeService = class _FacadeService {
  injector;
  constructor(injector) {
    this.injector = injector;
  }
  _maestrosService;
  _entornosSeguroService;
  get MaestrosService() {
    if (!this._maestrosService) {
      this._maestrosService = this.injector.get(MaestrosService);
    }
    return this._maestrosService;
  }
  get EntornosSeguroService() {
    if (!this._entornosSeguroService) {
      this._entornosSeguroService = this.injector.get(EntornosSeguroService);
    }
    return this._entornosSeguroService;
  }
  static \u0275fac = function FacadeService_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _FacadeService)(i05.\u0275\u0275inject(i05.Injector));
  };
  static \u0275prov = /* @__PURE__ */ i05.\u0275\u0275defineInjectable({ token: _FacadeService, factory: _FacadeService.\u0275fac, providedIn: "root" });
};

// src/app/pages/registro/registro.component.ts
import * as i2 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_forms.js?v=8b29cb1e";

// src/app/shared/functions/funciones.ts
import Swal from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/sweetalert2.js?v=8b29cb1e";
import __vite__cjsImport33_textMaskAddons_dist_createNumberMask from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/text-mask-addons_dist_createNumberMask.js?v=8b29cb1e"; const createNumberMask = __vite__cjsImport33_textMaskAddons_dist_createNumberMask.__esModule ? __vite__cjsImport33_textMaskAddons_dist_createNumberMask.default : __vite__cjsImport33_textMaskAddons_dist_createNumberMask;
import __vite__cjsImport34_cryptoJs from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/crypto-js.js?v=8b29cb1e"; const CryptoJS = ((m) => m?.__esModule ? m : { ...typeof m === "object" && !Array.isArray(m) || typeof m === "function" ? m : {}, default: m })(__vite__cjsImport34_cryptoJs);
import { Injectable as Injectable5 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i06 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
var Funciones = class _Funciones {
  key = CryptoJS.enc.Utf8.parse("7061737323313233");
  iv = CryptoJS.enc.Utf8.parse("7061737323313233");
  alertaRetorno(tipo, titulo, texto, cancel, condicion) {
    Swal.fire({
      title: titulo,
      icon: tipo,
      text: texto,
      showCancelButton: cancel,
      allowOutsideClick: false,
      confirmButtonText: "Si",
      cancelButtonText: "No",
      focusCancel: true
    }).then(condicion);
  }
  alertaSimple(tipo, titulo, texto, confirmar, algunaAccion) {
    Swal.fire({
      title: titulo,
      icon: tipo,
      text: texto,
      allowOutsideClick: false,
      showConfirmButton: confirmar
    });
  }
  cerrarAlerta() {
    Swal.close();
  }
  mostrarMensaje(tipo, nombreCampo) {
    var mensaje = "";
    if (tipo == "insertar") {
      mensaje = "Se realiz\xF3 satisfactoriamente el registro.";
    } else if (tipo == "actualizar") {
      mensaje = "Se realiz\xF3 satisfactoriamente la actualizaci\xF3n.";
    } else if (tipo == "eliminacion") {
      mensaje = "Se realiz\xF3 satisfactoriamente la eliminaci\xF3n del registro.";
    } else if (tipo == "error") {
      mensaje = "Hubo un error en el sistema. Consulte con el administrador.";
    } else if (tipo == "validaci\xF3n") {
      mensaje = "El dato" + nombreCampo + " es obligatorio.";
    }
    return mensaje;
  }
  IsNumberKey(event) {
    if (event.charCode >= 48 && event.charCode <= 57) {
      return true;
    }
    return false;
  }
  IsAlphabeticNumberKey(event) {
    if (event.charCode >= 48 && event.charCode <= 57 || event.charCode >= 65 && event.charCode <= 90 || event.charCode >= 97 && event.charCode <= 122) {
      return true;
    }
    return false;
  }
  ObtenerFechaDescarga() {
    var d = /* @__PURE__ */ new Date(), month = "" + (d.getUTCMonth() + 1), day = "" + d.getUTCDate(), year = "" + d.getFullYear(), hora = "" + d.getHours(), minutos = "" + d.getMinutes(), segundos = "" + d.getSeconds();
    if (month.length < 2)
      month = "0" + month;
    if (day.length < 2)
      day = "0" + day;
    return [day, month, year].join("/") + " " + [hora, minutos, segundos].join(":");
  }
  obtenerFechaDescargaGuardarArchivo() {
    var d = /* @__PURE__ */ new Date(), month = "" + (d.getUTCMonth() + 1), day = "" + d.getUTCDate(), year = "" + d.getFullYear(), hora = "" + d.getHours(), minutos = "" + d.getMinutes(), segundos = "" + d.getSeconds();
    if (month.length < 2)
      month = "0" + month;
    if (day.length < 2)
      day = "0" + day;
    return [day, month, year].join("_") + "_" + [hora, minutos, segundos].join("");
  }
  formatDate(date) {
    var d = new Date(date), month = "" + (d.getUTCMonth() + 1), day = "" + d.getUTCDate(), year = d.getFullYear();
    if (month.length < 2)
      month = "0" + month;
    if (day.length < 2)
      day = "0" + day;
    return [day, month, year].join("/");
  }
  formatDateAAAAMMDD(date) {
    var d = new Date(date), month = "" + (d.getUTCMonth() + 1), day = "" + d.getUTCDate(), year = d.getFullYear();
    if (month.length < 2)
      month = "0" + month;
    if (day.length < 2)
      day = "0" + day;
    return [year, month, day].join("-");
  }
  formatDateMDY(date) {
    var d = new Date(date), month = "" + (d.getUTCMonth() + 1), day = "" + d.getUTCDate(), year = d.getFullYear();
    if (month.length < 2)
      month = "0" + month;
    if (day.length < 2)
      day = "0" + day;
    return [month, day, year].join("/");
  }
  ConvertStringtoDate(fecha) {
    var parts = fecha.split("/");
    var mydate = new Date(parts[2], parts[1] - 1, parts[0]);
    return mydate;
  }
  ConvertStringtoDateDB(fecha) {
    var parts = fecha.split("-");
    var mydate = new Date(parts[0], parts[1] - 1, parts[2]);
    return mydate;
  }
  SumDaytoDate(fecha, dias) {
    var fechaAumentada = new Date(fecha);
    var retorno = new Date(fechaAumentada.setDate(fechaAumentada.getDate() + dias));
    return retorno;
  }
  RestDaytoDate(fecha, dias) {
    var fechaAumentada = new Date(fecha);
    var retorno = new Date(fechaAumentada.setDate(fechaAumentada.getDate() - dias));
    return retorno;
  }
  SumDaytoYear(fecha, anios) {
    var fechaAumentada = new Date(fecha);
    var retorno = new Date(fechaAumentada.setFullYear(fechaAumentada.getFullYear() + parseInt(anios.toString())));
    return retorno;
  }
  mensaje(tipo, mensaje) {
    this.alertaSimple(tipo, "", mensaje, true);
  }
  setearValorDecimal(input) {
    var num;
    if (input.length > 2) {
      if (!input.toString().includes(".")) {
        num = input.toString() + "00";
      } else {
        var arrMonto = input.toString().split(".");
        if (arrMonto[1].length == 1) {
          input = input.toString() + "0";
        }
        num = input.toString().replace(".", "");
        num = num.toString().replace(/\,/g, "");
      }
    } else {
      num = input;
    }
    return num;
  }
  format(input) {
    var num = input.replace(/\./g, "");
    num = num.replace(/\,/g, "");
    if (!isNaN(num)) {
      if (num.length > 2) {
        num = num.substring(0, num.length - 2) + "." + num.substring(num.length - 2);
      }
      input = num;
    } else {
      input = input.replace(/[^\d\.]*/g, "");
    }
    input = this.addCommas(input);
    var resultado = input;
    return resultado;
  }
  addCommas(nStr) {
    nStr += "";
    let x = nStr.split(".");
    let x1 = x[0];
    let x2 = x.length > 1 ? "." + x[1] : "";
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
      x1 = x1.replace(rgx, "$1,$2");
    }
    return x1 + x2;
  }
  fixed(numero, decimales) {
    numero = Number(numero.toFixed(decimales));
    return numero;
  }
  IsFloat(event) {
    var key = window.event ? event.which : event.keyCode;
    var chark = String.fromCharCode(key);
    var tempValue = event.currentTarget.value + chark;
    if (key >= 48 && key <= 57) {
      if (this.filter(tempValue) === false) {
        return false;
      } else {
        return true;
      }
    } else {
      if (key == 8 || key == 13 || key == 0) {
        return true;
      } else if (key == 46) {
        if (this.filter(tempValue) === false) {
          return false;
        } else {
          return true;
        }
      } else {
        return false;
      }
    }
  }
  filter(__val__) {
    var preg = /^([0-9]+\.?[0-9]{0,2})$/;
    if (preg.test(__val__) === true) {
      return true;
    } else {
      return false;
    }
  }
  IsMenor(valor, numero) {
    valor === void 0 ? valor = 0 : valor;
    if (valor <= numero) {
      return valor;
    } else {
      let cadena = valor.toString();
      return parseInt(cadena.slice(0, -1));
    }
  }
  castToFloat(monto) {
    if (monto == 0 || monto == "") {
      return 0;
    }
    let valueWithReplace = monto.toString().replace(/,/g, "");
    let value = Number.parseFloat(valueWithReplace);
    return value;
  }
  numberWithCommas = (x) => {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };
  numberRange(valor, numInferior, numSuperior) {
    valor == void 0 || valor == null ? valor = numInferior : valor;
    if (valor < numInferior || valor > numSuperior) {
      let valorCadena = valor.toString();
      let valorEntero = parseInt(valorCadena.slice(0, -1));
      return valorEntero = isNaN(valorEntero) ? numInferior : valorEntero;
    } else {
      return valor;
    }
  }
  currencyMask = createNumberMask({
    prefix: "",
    suffix: "",
    includeThousandsSeparator: true,
    thousandsSeparatorSymbol: ",",
    allowDecimal: true,
    decimalSymbol: ".",
    decimalLimit: 2,
    integerLimit: null,
    requireDecimal: false,
    allowNegative: false,
    allowLeadingZeroes: false
  });
  percentageMask = createNumberMask({
    prefix: "",
    suffix: "",
    includeThousandsSeparator: false,
    thousandsSeparatorSymbol: ",",
    allowDecimal: true,
    decimalSymbol: ".",
    decimalLimit: 2,
    integerLimit: null,
    requireDecimal: false,
    allowNegative: false,
    allowLeadingZeroes: false,
    maxValue: 100,
    minValue: 0
  });
  obtenerCorrelativoMes(mes) {
    let resultado = "";
    if (mes > 9) {
      resultado = mes.toString();
    } else {
      resultado = "0" + mes.toString();
    }
    return resultado;
  }
  validarEmail(telefono) {
    let emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
    if (emailRegex.test(telefono)) {
      return true;
    } else {
      return false;
    }
  }
  contarNumeroMeses(arrMatrizMeses, anio) {
    let cont = 0;
    arrMatrizMeses.forEach((element) => {
      if (element.Anio == anio) {
        cont++;
      }
    });
    return cont;
  }
  obtenerMatrizDiferenciaFechas(pfechaInicio, pfechaFin) {
    let arrAnioMeses = [];
    let mesInicio = parseInt(pfechaInicio.split("/")[1]);
    let mesFin = parseInt(pfechaFin.split("/")[1]);
    let mesInicioTemporal = 1;
    let mesFinTemporal = 12;
    let anioInicio = parseInt(pfechaInicio.split("/")[2]);
    let anioFin = parseInt(pfechaFin.split("/")[2]);
    for (let i = anioInicio; i <= anioFin; i++) {
      if (i > anioInicio && i < anioFin) {
        mesInicioTemporal = 1;
        mesFinTemporal = 12;
      } else if (i == anioInicio && i == anioFin) {
        mesInicioTemporal = mesInicio;
        mesFinTemporal = mesFin;
      } else if (i == anioInicio && i < anioFin) {
        mesInicioTemporal = mesInicio;
        mesFinTemporal = 12;
      } else if (i > anioInicio && i == anioFin) {
        mesInicioTemporal = 1;
        mesFinTemporal = mesFin;
      }
      for (let j = mesInicioTemporal; j <= mesFinTemporal; j++) {
        arrAnioMeses.push({ "Anio": i, "Mes": j });
      }
    }
    return arrAnioMeses;
  }
  obtenerDiferenciaMeses(pfechaInicio, pfechaFin) {
    let mesInicio;
    let mesFin;
    let anioInicio;
    let anioFin;
    let diferenciaMeses;
    mesInicio = parseInt(pfechaInicio.split("/")[1]);
    mesFin = parseInt(pfechaFin.split("/")[1]);
    anioInicio = parseInt(pfechaInicio.split("/")[2]);
    anioFin = parseInt(pfechaFin.split("/")[2]);
    diferenciaMeses = anioFin * 12 + mesFin - (anioInicio * 12 + mesInicio);
    return diferenciaMeses + 1;
  }
  formatFullDate(date) {
    var d = new Date(date), month = "" + (d.getUTCMonth() + 1), day = "" + d.getUTCDate(), year = "" + d.getFullYear(), hora = "" + d.getHours(), minutos = "" + d.getMinutes(), segundos = "" + d.getSeconds();
    if (month.length < 2)
      month = "0" + month;
    if (day.length < 2)
      day = "0" + day;
    if (parseInt(segundos) < 10) {
      segundos = "0" + segundos;
    }
    if (parseInt(minutos) < 10) {
      minutos = "0" + minutos;
    }
    return [day, month, year].join("/") + " " + [hora, minutos, segundos].join(":");
  }
  autosize() {
    var el = this;
    setTimeout(function() {
      el.style.cssText = "height:auto; padding:0";
      el.style.cssText = "height:" + el.scrollHeight + "px";
    }, 0);
  }
  validarCaracteresRaros(e) {
    let tecla = document.all ? e.keyCode : e.which;
    if (tecla == 8) {
      return true;
    }
    let patron = /[A-Za-z0-9-'_]/;
    let tecla_final = String.fromCharCode(tecla);
    return patron.test(tecla_final);
  }
  formatSize(size) {
    let kbytes = 1024;
    let operacion = 0;
    let respuesta;
    if (size >= kbytes) {
      if (size > kbytes * kbytes) {
        if (size > kbytes * kbytes * kbytes) {
          operacion = size / (kbytes * kbytes * kbytes);
          respuesta = this.fixed(operacion, 2) + " GB";
        } else {
          operacion = size / (kbytes * kbytes);
          respuesta = this.fixed(operacion, 2) + " MB";
        }
      } else {
        operacion = size / kbytes;
        respuesta = this.fixed(operacion, 2) + " KB";
      }
    } else {
      operacion = size;
      respuesta = operacion + " bytes";
    }
    return respuesta;
  }
  encriptar(trama) {
    let encrypted = CryptoJS.AES.encrypt(trama, "69").toString();
    return encrypted;
  }
  desencriptar(encryptTex) {
    let decrypted = CryptoJS.AES.decrypt(encryptTex, "69").toString(CryptoJS.enc.Utf8);
    return decrypted;
  }
  fechaString(fecha) {
    let dd = fecha.substring(0, 2);
    let mm = fecha.substring(3, 5);
    let yyyy = fecha.substring(6, 8);
    return "20" + yyyy + "-" + mm + "-" + dd;
  }
  convertirFechaString(fecha) {
    var parts = fecha.split("/");
    let dd = parts[0];
    let mm = parts[1];
    let yyyy = parts[2];
    return yyyy + "-" + mm + "-" + dd;
  }
  envioFecha(date) {
    const localISOTime = new Date(date.getTime() - date.getTimezoneOffset() * 6e4).toISOString();
    return localISOTime;
  }
  currencyMaskNumber = createNumberMask({
    prefix: "",
    suffix: "",
    includeThousandsSeparator: true,
    thousandsSeparatorSymbol: ",",
    allowDecimal: true,
    decimalSymbol: "",
    decimalLimit: 0,
    integerLimit: null,
    requireDecimal: false,
    allowNegative: false,
    allowLeadingZeroes: false
  });
  addDays(fecha, dias) {
    let newFecha = new Date(fecha);
    newFecha.setDate(newFecha.getDate() + dias);
    return newFecha;
  }
  validarLatitud(e) {
    let tecla = document.all ? e.keyCode : e.which;
    if (tecla == 8) {
      return true;
    }
    let patron = /[0-9-'_.+]/;
    let tecla_final = String.fromCharCode(tecla);
    return patron.test(tecla_final);
  }
  validarHora(e) {
    let tecla = document.all ? e.keyCode : e.which;
    if (tecla == 8) {
      return true;
    }
    let patron = /[']/;
    let tecla_final = String.fromCharCode(tecla);
    return patron.test(tecla_final);
  }
  formatBytes(bytes, decimals) {
    if (bytes == 0) {
      return "0 Byte";
    }
    var k = 1024;
    var sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB"];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + " " + sizes[i];
  }
  currencyMaskKm = createNumberMask({
    prefix: "",
    suffix: "",
    includeThousandsSeparator: true,
    thousandsSeparatorSymbol: ",",
    allowDecimal: true,
    decimalSymbol: ".",
    decimalLimit: 3,
    integerLimit: 3,
    requireDecimal: false,
    allowNegative: false,
    allowLeadingZeroes: false
  });
  asignarRowsColsPan(indice, celda, worksheet, header) {
    let colspan = 0;
    let rowspan = 0;
    let color = "";
    header.forEach((element) => {
      if (element.columna == indice) {
        colspan = element.colspan;
        rowspan = element.rowspan;
        color = element.color != null ? element.color : "";
        worksheet.mergeCells(celda.address + ":" + this.ConvertToLetter(celda.col + colspan) + (celda.row + rowspan).toString());
        if (color != "") {
          celda.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FF" + color },
            bgColor: { argb: "FFFF9980" }
          };
        } else {
          celda.fill = {
            type: "pattern",
            pattern: "solid",
            fgColor: { argb: "FF009DDB" },
            bgColor: { argb: "FFFF9980" }
          };
        }
      }
    });
  }
  alinearDetalle(indice, celda, numColumns) {
    if (indice > 2) {
      if (indice == numColumns.length - 1) {
        celda.alignment = { horizontal: "left", vertical: "middle", wrapText: "pre" };
      } else if (indice == numColumns.length - 2) {
        celda.alignment = { horizontal: "left", vertical: "middle", wrapText: "pre" };
      } else if (indice == numColumns.length - 3) {
        celda.alignment = { horizontal: "left", vertical: "middle", wrapText: "pre" };
      } else if (indice == numColumns.length - 4) {
        celda.alignment = { horizontal: "left", vertical: "middle", wrapText: "pre" };
      } else {
        celda.alignment = { horizontal: "center", vertical: "middle", wrapText: "pre" };
      }
    } else {
      celda.alignment = { horizontal: "left", vertical: "middle", wrapText: "pre" };
    }
  }
  alinearDatosCabecera(indice, celda, worksheet) {
    let bold = false;
    if (indice % 2 > 0) {
      bold = true;
      celda.font = { name: "Segoe UI", size: 9, bold };
    } else {
      worksheet.mergeCells(celda.address + ":" + this.ConvertToLetter(celda.col + 4) + celda.row.toString());
      celda.font = { name: "Segoe UI", size: 10, bold };
    }
    celda.alignment = { horizontal: "left", vertical: "middle", wrapText: "pre" };
  }
  ConvertToLetter(columnNumber) {
    var dividend = columnNumber;
    var columnName = "";
    var modulo;
    while (dividend > 0) {
      modulo = (dividend - 1) % 26;
      columnName = String.fromCharCode(65 + modulo).toString() + columnName;
      dividend = parseInt(((dividend - modulo) / 26).toString());
    }
    return columnName;
  }
  concatenarEdades(data) {
    let edades_concatenadas = "";
    if (data.edad_peaton_cv != "")
      edades_concatenadas = edades_concatenadas + data.edad_peaton_cv + ",";
    if (data.edad_pasajero_cv != "")
      edades_concatenadas = edades_concatenadas + data.edad_pasajero_cv + ",";
    if (data.edad_ocupante_cv != "")
      edades_concatenadas = edades_concatenadas + data.edad_ocupante_cv;
    let ultimocaracter = edades_concatenadas.substring(edades_concatenadas.length - 1, edades_concatenadas.length);
    if (ultimocaracter == ",")
      edades_concatenadas = edades_concatenadas.slice(0, edades_concatenadas.length - 1);
    return edades_concatenadas;
  }
  tipoEntidad(data) {
    let tipoEntidad = "";
    data.nombre_comisaria = data.nombre_comisaria == null ? "" : data.nombre_comisaria;
    data.upiat = data.upiat == null ? "" : data.upiat;
    data.tipo_concesionaria = data.tipo_concesionaria == null ? "" : data.tipo_concesionaria;
    if (data.nombre_comisaria != "") {
      tipoEntidad = "COMISAR\xCDA";
    } else if (data.upiat != "") {
      tipoEntidad = "UPIAT";
    } else if (data.tipo_concesionaria != "") {
      tipoEntidad = "CONSECIONARIA";
    }
    return tipoEntidad;
  }
  static \u0275fac = function Funciones_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _Funciones)();
  };
  static \u0275prov = /* @__PURE__ */ i06.\u0275\u0275defineInjectable({
    token: _Funciones,
    factory: _Funciones.\u0275fac,
    providedIn: "root"
    // Esto asegura que el servicio esté disponible en toda la aplicación
  });
};

// src/app/pages/registro/registro.component.ts
import * as i4 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";
import * as i5 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@ng-select_ng-select.js?v=8b29cb1e";
import * as i6 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common.js?v=8b29cb1e";
import * as i7 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_material_radio.js?v=8b29cb1e";
import * as i8 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/ngx-dropzone.js?v=8b29cb1e";
import * as i9 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_google-maps.js?v=8b29cb1e";
function RegistroComponent_map_marker_32_Template(rf, ctx) {
  if (rf & 1) {
    i07.\u0275\u0275element(0, "map-marker", 42);
  }
  if (rf & 2) {
    const ctx_r0 = i07.\u0275\u0275nextContext();
    i07.\u0275\u0275property("position", ctx_r0.selectedPosition);
  }
}
function RegistroComponent_For_38_Template(rf, ctx) {
  if (rf & 1) {
    i07.\u0275\u0275elementStart(0, "mat-radio-button", 24);
    i07.\u0275\u0275text(1);
    i07.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const estado_r2 = ctx.$implicit;
    i07.\u0275\u0275property("value", estado_r2.idEstadoConservacion);
    i07.\u0275\u0275advance();
    i07.\u0275\u0275textInterpolate(estado_r2.descripcion);
  }
}
function RegistroComponent_For_44_Template(rf, ctx) {
  if (rf & 1) {
    i07.\u0275\u0275elementStart(0, "mat-radio-button", 24);
    i07.\u0275\u0275text(1);
    i07.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const demanda_r3 = ctx.$implicit;
    i07.\u0275\u0275property("value", demanda_r3.idDemandaUsuarios);
    i07.\u0275\u0275advance();
    i07.\u0275\u0275textInterpolate(demanda_r3.descripcion);
  }
}
function RegistroComponent_For_50_Template(rf, ctx) {
  if (rf & 1) {
    i07.\u0275\u0275elementStart(0, "mat-radio-button", 24);
    i07.\u0275\u0275text(1);
    i07.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const nivel_r4 = ctx.$implicit;
    i07.\u0275\u0275property("value", nivel_r4.idNivelSeguridadVial);
    i07.\u0275\u0275advance();
    i07.\u0275\u0275textInterpolate(nivel_r4.descripcion);
  }
}
function RegistroComponent_For_56_Template(rf, ctx) {
  if (rf & 1) {
    i07.\u0275\u0275elementStart(0, "mat-radio-button", 24);
    i07.\u0275\u0275text(1);
    i07.\u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const nivel_r5 = ctx.$implicit;
    i07.\u0275\u0275property("value", nivel_r5.idNivelSeguridadCiudadana);
    i07.\u0275\u0275advance();
    i07.\u0275\u0275textInterpolate(nivel_r5.descripcion);
  }
}
function RegistroComponent_ngx_dropzone_preview_64_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = i07.\u0275\u0275getCurrentView();
    i07.\u0275\u0275elementStart(0, "ngx-dropzone-preview", 43);
    i07.\u0275\u0275listener("removed", function RegistroComponent_ngx_dropzone_preview_64_Template_ngx_dropzone_preview_removed_0_listener() {
      const f_r7 = i07.\u0275\u0275restoreView(_r6).$implicit;
      const ctx_r0 = i07.\u0275\u0275nextContext();
      return i07.\u0275\u0275resetView(ctx_r0.onRemove(f_r7));
    });
    i07.\u0275\u0275elementStart(1, "ngx-dropzone-label");
    i07.\u0275\u0275text(2);
    i07.\u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const f_r7 = ctx.$implicit;
    i07.\u0275\u0275property("removable", true);
    i07.\u0275\u0275advance(2);
    i07.\u0275\u0275textInterpolate2("", f_r7.name, " (", f_r7.type, ")");
  }
}
function RegistroComponent_ngx_dropzone_image_preview_65_Template(rf, ctx) {
  if (rf & 1) {
    i07.\u0275\u0275element(0, "ngx-dropzone-image-preview", 44);
  }
  if (rf & 2) {
    const f_r8 = ctx.$implicit;
    i07.\u0275\u0275property("file", f_r8);
  }
}
var RegistroComponent = class _RegistroComponent {
  cdr;
  zone;
  fs;
  formBuilder;
  funciones;
  router;
  beEntornosSeguro;
  formEntornosSeguros;
  files = [];
  listaTiposInfraestructura;
  selectedItem = null;
  // Para manejar la opción seleccionada
  center = { lat: -12.046374, lng: -77.042793 };
  // Coordenadas de ejemplo (Lima, Perú)
  zoom = 12;
  selectedPosition = null;
  idEstadoConservacion = 0;
  listaEstadoConservacion;
  idDemandaUsuarios = 0;
  listaDemandaUsuarios;
  idNivelSeguridadVial = 0;
  listaNivelSeguridadVial;
  idNivelSeguridadCiudadana = 0;
  listaNivelSeguridadCiudadana;
  constructor(cdr, zone, fs, formBuilder, funciones, router) {
    this.cdr = cdr;
    this.zone = zone;
    this.fs = fs;
    this.formBuilder = formBuilder;
    this.funciones = funciones;
    this.router = router;
  }
  ngOnInit() {
    this.getUserLocation();
    this.cargarControles();
    this.cargarForm();
  }
  cargarForm() {
    this.formEntornosSeguros = this.formBuilder.group({
      idTipoInfraestructura: [null, Validators.required],
      nombre_referencia: [null, Validators.required],
      idEstadoConservacion: [null, Validators.required],
      idDemandaUsuarios: [null, Validators.required],
      idNivelSeguridadVial: [null, Validators.required],
      idNivelSeguridadCiudadana: [null, Validators.required],
      dni: [null, Validators.required],
      archivos: [null, Validators.required],
      nombre_archivos: [null, Validators.required],
      coordenadas: [null, Validators.required]
    });
  }
  setearParametrosEnvioInformacion(pFormulario) {
    return __async(this, null, function* () {
      this.beEntornosSeguro = new EntornosSeguro();
      this.beEntornosSeguro.idTipoInfraestructura = pFormulario.value.idTipoInfraestructura;
      this.beEntornosSeguro.nombreReferencia = pFormulario.value.nombre_referencia;
      this.beEntornosSeguro.latitud = this.selectedPosition?.lat;
      this.beEntornosSeguro.longitud = this.selectedPosition?.lng;
      this.beEntornosSeguro.idEstadoConservacion = pFormulario.value.idEstadoConservacion;
      this.beEntornosSeguro.idDemandaUsuarios = pFormulario.value.idDemandaUsuarios;
      this.beEntornosSeguro.idNivelSeguridadVial = pFormulario.value.idNivelSeguridadVial;
      this.beEntornosSeguro.idNivelSeguridadCiudadana = pFormulario.value.idNivelSeguridadCiudadana;
      this.beEntornosSeguro.dni = pFormulario.value.dni;
      if (this.files[0]) {
        this.beEntornosSeguro.foto = pFormulario.value.nombre_archivos[0];
      }
      this.beEntornosSeguro.fechaRegistro = /* @__PURE__ */ new Date();
      ;
      this.beEntornosSeguro.idUsuarioRegistro = 1;
      console.log("Data a enviar: ", this.beEntornosSeguro);
    });
  }
  cargarControles() {
    this.fs.MaestrosService.listaTiposInfraestructura().subscribe({
      next: (data) => {
        this.listaTiposInfraestructura = data;
      },
      error: (error) => {
        console.error("Error al obtener lista de tipos de infraestructura:", error);
      }
    });
    this.fs.MaestrosService.listaDemandaUsuario().subscribe({
      next: (data) => {
        this.listaDemandaUsuarios = data;
      },
      error: (error) => {
        console.error("Error al obtener lista de demanda de usuarios:", error);
      }
    });
    this.fs.MaestrosService.listaEstadoConservacion().subscribe({
      next: (data) => {
        this.listaEstadoConservacion = data;
      },
      error: (error) => {
        console.error("Error al obtener lista de estado de conservaci\xF3n:", error);
      }
    });
    this.fs.MaestrosService.listaNivelSeguridadVial().subscribe({
      next: (data) => {
        this.listaNivelSeguridadVial = data;
      },
      error: (error) => {
        console.error("Error al obtener lista de nivel de seguridad vial:", error);
      }
    });
    this.fs.MaestrosService.listaNivelSeguridadCiudadana().subscribe({
      next: (data) => {
        this.listaNivelSeguridadCiudadana = data;
      },
      error: (error) => {
        console.error("Error al obtener lista de nivel de seguridad ciudadana:", error);
      }
    });
  }
  guardar() {
    return __async(this, null, function* () {
      this.setearParametrosEnvioInformacion(this.formEntornosSeguros);
      yield this.fs.EntornosSeguroService.crearEntornosSeguro(this.beEntornosSeguro).subscribe({
        next: (response) => {
          console.log("Respuesta del servidor:", response);
          this.router.navigate(["/confirmacion"]);
        },
        error: (err) => {
          console.error("Error al enviar datos:", err);
        }
      });
    });
  }
  convertirImagenABase64(file) {
    console.log("Archivo a convertir: ", file);
    return new Promise((resolve, reject) => {
      if (!file) {
        reject("El archivo no existe o no es v\xE1lido");
        return;
      }
      const reader = new FileReader();
      reader.onload = () => {
        console.log("Resultado Base64:", reader.result);
        resolve(reader.result);
      };
      reader.onerror = (error) => {
        console.error("Error al leer el archivo:", error);
        reject(error);
      };
      reader.readAsDataURL(file);
    });
  }
  getUserLocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition((position) => {
        this.zone.run(() => {
          this.center = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          this.zoom = 15;
          console.log("Coordenadas actuales:", this.center);
        });
      }, (error) => {
        console.error("Error al obtener la ubicaci\xF3n:", error);
        alert("No se pudo obtener la ubicaci\xF3n. Activa el GPS y recarga la p\xE1gina.");
      }, {
        enableHighAccuracy: true,
        // Usar GPS de alta precisión
        timeout: 1e4,
        // Tiempo máximo para obtener la ubicación (ms)
        maximumAge: 0
        // No usar datos en caché
      });
    } else {
      console.error("Geolocalizaci\xF3n no est\xE1 soportada en este navegador.");
      alert("Tu navegador no soporta geolocalizaci\xF3n.");
    }
  }
  onMapClick(event) {
    console.log("Evento de clic en el mapa:", event);
    if (event.latLng) {
      this.zone.run(() => {
        this.selectedPosition = {
          lat: event.latLng.lat(),
          // Usa el operador `!` para indicar que no es null
          lng: event.latLng.lng()
        };
        this.formEntornosSeguros.patchValue({
          coordenadas: this.selectedPosition
          // Actualiza el FormControl con las coordenadas
        });
        console.log("Coordenadas seleccionadas:", this.selectedPosition.lat, this.selectedPosition.lng);
        this.cdr.detectChanges();
      });
    } else {
      console.error("No se pudo obtener las coordenadas, latLng es null.");
    }
  }
  ngAfterViewInit() {
    console.log("Componente inicializado");
    this.cdr.detectChanges();
  }
  onSelect(event) {
    console.log(event);
    this.files.push(...event.addedFiles);
    this.formEntornosSeguros.patchValue({
      nombre_archivos: this.files.map((file) => file.name),
      // Actualiza el FormControl con los archivos
      archivos: this.files
    });
  }
  onRemove(event) {
    console.log(event);
    this.files.splice(this.files.indexOf(event), 1);
    this.formEntornosSeguros.patchValue({
      nombre_archivos: this.files.map((file) => file.name),
      // Actualiza el FormControl con los archivos
      archivos: this.files
    });
  }
  static \u0275fac = function RegistroComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _RegistroComponent)(i07.\u0275\u0275directiveInject(i07.ChangeDetectorRef), i07.\u0275\u0275directiveInject(i07.NgZone), i07.\u0275\u0275directiveInject(FacadeService), i07.\u0275\u0275directiveInject(i2.FormBuilder), i07.\u0275\u0275directiveInject(Funciones), i07.\u0275\u0275directiveInject(i4.Router));
  };
  static \u0275cmp = /* @__PURE__ */ i07.\u0275\u0275defineComponent({ type: _RegistroComponent, selectors: [["app-registro"]], standalone: true, features: [i07.\u0275\u0275StandaloneFeature], decls: 73, vars: 7, consts: [[1, "account-pages", "mt-1", "mb-5"], [1, "container"], [1, "row", "justify-content-center"], [1, "col-md-8", "col-lg-6", "col-xl-4"], [1, "card"], [1, "card-body", "p-4"], [1, "text-center", "w-75", "m-auto"], [1, "auth-logo"], ["href", "index.html", 1, "logo", "logo-dark", "text-center"], [1, "logo-lg"], ["src", "/images/LOGO ELEGIDO 2019MEMO 549-2020-ANEXO.png", "alt", "", "height", "100"], [1, "mt-3", "text-center"], [1, "text-muted", "mt-2"], ["role", "form", "autocomplete", "off", "enctype", "multipart/form-data", 3, "ngSubmit", "formGroup"], [1, "mb-2"], ["for", "select-infraestructura", 1, "form-label"], ["bindLabel", "descripcion", "bindValue", "idTipoInfraestructura", "placeholder", "Selecciona una opci\xF3n", "formControlName", "idTipoInfraestructura", 3, "items"], ["for", "nombre_referencia", 1, "form-label"], ["type", "text", "id", "nombre_referencia", "required", "", "placeholder", "", "formControlName", "nombre_referencia", 1, "form-control"], [1, "form-label"], ["height", "400px", "width", "100%", 3, "mapClick", "center", "zoom"], [3, "position", 4, "ngIf"], ["for", "idEstadoConservacion", 1, "form-label"], ["aria-labelledby", "example-radio-group-label", "formControlName", "idEstadoConservacion", 1, "form-control"], [1, "example-radio-button", 3, "value"], ["for", "idDemandaUsuarios", 1, "form-label"], ["aria-labelledby", "example-radio-group-label", "formControlName", "idDemandaUsuarios", 1, "form-control"], ["for", "idNivelSeguridad", 1, "form-label"], ["aria-labelledby", "example-radio-group-label", "formControlName", "idNivelSeguridadVial", 1, "form-control"], ["for", "idNivelSeguridadCiudadana", 1, "form-label"], ["aria-labelledby", "example-radio-group-label", "formControlName", "idNivelSeguridadCiudadana", 1, "form-control"], ["accept", "image/*", 3, "change"], [2, "margin", "0px"], [1, "dz-message", "needsclick"], [1, "h1", "text-muted", "ri-camera-fill"], [1, "text-muted", "font-13"], [3, "removable", "removed", 4, "ngFor", "ngForOf"], ["ngProjectAs", "ngx-dropzone-preview", 5, ["ngx-dropzone-preview"], 3, "file", 4, "ngFor", "ngForOf"], ["for", "dni", 1, "form-label"], ["type", "text", "id", "dni", "required", "", "placeholder", "", "name", "dni", "maxlength", "8", "formControlName", "dni", "OnlyNumber", "true", 1, "form-control", 3, "keypress"], [1, "d-grid", "text-center"], ["type", "submit", 1, "btn", "btn-primary"], [3, "position"], [3, "removed", "removable"], ["ngProjectAs", "ngx-dropzone-preview", 5, ["ngx-dropzone-preview"], 3, "file"]], template: function RegistroComponent_Template(rf, ctx) {
    if (rf & 1) {
      i07.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6)(7, "div", 7)(8, "a", 8)(9, "span", 9);
      i07.\u0275\u0275element(10, "img", 10);
      i07.\u0275\u0275elementEnd()()()();
      i07.\u0275\u0275elementStart(11, "div", 11)(12, "h3");
      i07.\u0275\u0275text(13, "ENTORNOS SEGUROS");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(14, "p", 12);
      i07.\u0275\u0275text(15, " Bienvenido al aplicativo de identificaci\xF3n ");
      i07.\u0275\u0275element(16, "br");
      i07.\u0275\u0275text(17, " de infraestructura sostenible y segura. ");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275element(18, "br");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(19, "form", 13);
      i07.\u0275\u0275listener("ngSubmit", function RegistroComponent_Template_form_ngSubmit_19_listener() {
        return ctx.guardar();
      });
      i07.\u0275\u0275elementStart(20, "div", 14)(21, "label", 15);
      i07.\u0275\u0275text(22, "Elige la Infraestructura");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275element(23, "ng-select", 16);
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(24, "div", 14)(25, "label", 17);
      i07.\u0275\u0275text(26, "Nombre o referencia");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275element(27, "input", 18);
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(28, "div", 14)(29, "label", 19);
      i07.\u0275\u0275text(30, "Ubicar Punto");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(31, "google-map", 20);
      i07.\u0275\u0275listener("mapClick", function RegistroComponent_Template_google_map_mapClick_31_listener($event) {
        return ctx.onMapClick($event);
      });
      i07.\u0275\u0275template(32, RegistroComponent_map_marker_32_Template, 1, 1, "map-marker", 21);
      i07.\u0275\u0275elementEnd()();
      i07.\u0275\u0275elementStart(33, "div", 14)(34, "label", 22);
      i07.\u0275\u0275text(35, "Estado de Conservaci\xF3n");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(36, "mat-radio-group", 23);
      i07.\u0275\u0275repeaterCreate(37, RegistroComponent_For_38_Template, 2, 2, "mat-radio-button", 24, i07.\u0275\u0275repeaterTrackByIdentity);
      i07.\u0275\u0275elementEnd()();
      i07.\u0275\u0275elementStart(39, "div", 14)(40, "label", 25);
      i07.\u0275\u0275text(41, "Demanda de usuarios");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(42, "mat-radio-group", 26);
      i07.\u0275\u0275repeaterCreate(43, RegistroComponent_For_44_Template, 2, 2, "mat-radio-button", 24, i07.\u0275\u0275repeaterTrackByIdentity);
      i07.\u0275\u0275elementEnd()();
      i07.\u0275\u0275elementStart(45, "div", 14)(46, "label", 27);
      i07.\u0275\u0275text(47, "Nivel de Seguridad Vial");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(48, "mat-radio-group", 28);
      i07.\u0275\u0275repeaterCreate(49, RegistroComponent_For_50_Template, 2, 2, "mat-radio-button", 24, i07.\u0275\u0275repeaterTrackByIdentity);
      i07.\u0275\u0275elementEnd()();
      i07.\u0275\u0275elementStart(51, "div", 14)(52, "label", 29);
      i07.\u0275\u0275text(53, "Nivel de Seguridad Ciudadana");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(54, "mat-radio-group", 30);
      i07.\u0275\u0275repeaterCreate(55, RegistroComponent_For_56_Template, 2, 2, "mat-radio-button", 24, i07.\u0275\u0275repeaterTrackByIdentity);
      i07.\u0275\u0275elementEnd()();
      i07.\u0275\u0275elementStart(57, "div", 14)(58, "ngx-dropzone", 31);
      i07.\u0275\u0275listener("change", function RegistroComponent_Template_ngx_dropzone_change_58_listener($event) {
        return ctx.onSelect($event);
      });
      i07.\u0275\u0275elementStart(59, "ngx-dropzone-label", 32)(60, "div", 33);
      i07.\u0275\u0275element(61, "i", 34);
      i07.\u0275\u0275elementStart(62, "span", 35);
      i07.\u0275\u0275text(63, "Toma una foto");
      i07.\u0275\u0275elementEnd()()();
      i07.\u0275\u0275template(64, RegistroComponent_ngx_dropzone_preview_64_Template, 3, 3, "ngx-dropzone-preview", 36);
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275template(65, RegistroComponent_ngx_dropzone_image_preview_65_Template, 1, 1, "ngx-dropzone-image-preview", 37);
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(66, "div", 14)(67, "label", 38);
      i07.\u0275\u0275text(68, "DNI");
      i07.\u0275\u0275elementEnd();
      i07.\u0275\u0275elementStart(69, "input", 39);
      i07.\u0275\u0275listener("keypress", function RegistroComponent_Template_input_keypress_69_listener($event) {
        return ctx.funciones.IsNumberKey($event);
      });
      i07.\u0275\u0275elementEnd()();
      i07.\u0275\u0275elementStart(70, "div", 40)(71, "button", 41);
      i07.\u0275\u0275text(72, " Grabar ");
      i07.\u0275\u0275elementEnd()()()()()()()()();
    }
    if (rf & 2) {
      i07.\u0275\u0275advance(19);
      i07.\u0275\u0275property("formGroup", ctx.formEntornosSeguros);
      i07.\u0275\u0275advance(4);
      i07.\u0275\u0275property("items", ctx.listaTiposInfraestructura);
      i07.\u0275\u0275advance(8);
      i07.\u0275\u0275property("center", ctx.center)("zoom", ctx.zoom);
      i07.\u0275\u0275advance();
      i07.\u0275\u0275property("ngIf", ctx.selectedPosition);
      i07.\u0275\u0275advance(5);
      i07.\u0275\u0275repeater(ctx.listaEstadoConservacion);
      i07.\u0275\u0275advance(6);
      i07.\u0275\u0275repeater(ctx.listaDemandaUsuarios);
      i07.\u0275\u0275advance(6);
      i07.\u0275\u0275repeater(ctx.listaNivelSeguridadVial);
      i07.\u0275\u0275advance(6);
      i07.\u0275\u0275repeater(ctx.listaNivelSeguridadCiudadana);
      i07.\u0275\u0275advance(9);
      i07.\u0275\u0275property("ngForOf", ctx.files);
      i07.\u0275\u0275advance();
      i07.\u0275\u0275property("ngForOf", ctx.files);
    }
  }, dependencies: [NgSelectModule, i5.NgSelectComponent, CommonModule, i6.NgForOf, i6.NgIf, FormsModule, i2.\u0275NgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.MaxLengthValidator, MatRadioModule, i7.MatRadioGroup, i7.MatRadioButton, NgxDropzoneModule, i8.NgxDropzoneComponent, i8.NgxDropzoneLabelDirective, i8.NgxDropzonePreviewComponent, i8.NgxDropzoneImagePreviewComponent, GoogleMapsModule, i9.GoogleMap, i9.MapMarker, ReactiveFormsModule, i2.FormGroupDirective, i2.FormControlName], styles: ['@charset "UTF-8";\n\n\n\nngx-dropzone[_ngcontent-%COMP%] {\n  border: 2px #788088;\n  border-radius: 5px;\n  padding: 10px;\n  max-height: 150px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f8f9fa;\n}\nngx-dropzone-label[_ngcontent-%COMP%] {\n  font-size: 14px;\n  color: #6c757d;\n}\nngx-dropzone-preview[_ngcontent-%COMP%] {\n  min-height: 50px;\n}\ngoogle-map[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 10;\n  border: 1px solid #ddd;\n}\n.capa-superpuesta[_ngcontent-%COMP%] {\n  pointer-events: none;\n  z-index: -1;\n}\n/*# sourceMappingURL=registro.component.css.map */'] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i07.\u0275setClassDebugInfo(RegistroComponent, { className: "RegistroComponent", filePath: "src\\app\\pages\\registro\\registro.component.ts", lineNumber: 26 });
})();

// src/app/pages/confirmacion/confirmacion.component.ts
import { Component as Component3 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { RouterModule as RouterModule2 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";
import * as i08 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import * as i15 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";
var _c02 = () => ["/"];
var ConfirmacionComponent = class _ConfirmacionComponent {
  static \u0275fac = function ConfirmacionComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _ConfirmacionComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ i08.\u0275\u0275defineComponent({ type: _ConfirmacionComponent, selectors: [["app-confirmacion"]], standalone: true, features: [i08.\u0275\u0275StandaloneFeature], decls: 35, vars: 2, consts: [[1, "account-pages", "mt-5", "mb-5"], [1, "container"], [1, "row", "justify-content-center"], [1, "col-md-8", "col-lg-6", "col-xl-4"], [1, "card"], [1, "card-body", "p-4"], [1, "text-center", "w-75", "m-auto"], [1, "auth-logo"], ["href", "index.html", 1, "logo", "logo-dark", "text-center"], [1, "logo-lg"], ["src", "/images/LOGO ELEGIDO 2019MEMO 549-2020-ANEXO.png", "alt", "", "height", "100"], [1, "mt-3", "text-center"], ["version", "1.1", 0, "xmlns", "x", "&ns_extend;", 0, "xmlns", "i", "&ns_ai;", 0, "xmlns", "graph", "&ns_graphs;", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "x", "0px", "y", "0px", "viewBox", "0 0 98 98", 0, "xml", "space", "preserve", 2, "height", "120px"], ["type", "text/css"], [0, "i", "extraneous", "self"], ["id", "XMLID_50_", "cx", "49", "cy", "49", "r", "49", 1, "st0"], ["id", "XMLID_4_"], ["id", "XMLID_49_", "d", "M77.3,42.7V77c0,0.6-0.4,1-1,1H21.7c-0.5,0-1-0.5-1-1V42.7c0-0.3,0.1-0.6,0.4-0.8l27.3-21.7\n                                                c0.3-0.3,0.8-0.3,1.2,0l27.3,21.7C77.1,42.1,77.3,42.4,77.3,42.7z", 1, "st1"], ["id", "XMLID_48_", "d", "M66.5,69.5h-35c-1.1,0-2-0.9-2-2V26.8c0-1.1,0.9-2,2-2h35c1.1,0,2,0.9,2,2v40.7\n                                                C68.5,68.6,67.6,69.5,66.5,69.5z", 1, "st2"], ["id", "XMLID_47_", "d", "M62.9,33.4H47.2c-0.5,0-0.9-0.4-0.9-0.9v-0.2c0-0.5,0.4-0.9,0.9-0.9h15.7\n                                                c0.5,0,0.9,0.4,0.9,0.9v0.2C63.8,33,63.4,33.4,62.9,33.4z", 1, "st1"], ["id", "XMLID_46_", "d", "M62.9,40.3H47.2c-0.5,0-0.9-0.4-0.9-0.9v-0.2c0-0.5,0.4-0.9,0.9-0.9h15.7\n                                                c0.5,0,0.9,0.4,0.9,0.9v0.2C63.8,39.9,63.4,40.3,62.9,40.3z", 1, "st1"], ["id", "XMLID_45_", "d", "M62.9,47.2H47.2c-0.5,0-0.9-0.4-0.9-0.9v-0.2c0-0.5,0.4-0.9,0.9-0.9h15.7\n                                                c0.5,0,0.9,0.4,0.9,0.9v0.2C63.8,46.8,63.4,47.2,62.9,47.2z", 1, "st1"], ["id", "XMLID_44_", "d", "M62.9,54.1H47.2c-0.5,0-0.9-0.4-0.9-0.9v-0.2c0-0.5,0.4-0.9,0.9-0.9h15.7\n                                                c0.5,0,0.9,0.4,0.9,0.9v0.2C63.8,53.7,63.4,54.1,62.9,54.1z", 1, "st1"], ["id", "XMLID_43_", "d", "M41.6,40.1h-5.8c-0.6,0-1-0.4-1-1v-6.7c0-0.6,0.4-1,1-1h5.8c0.6,0,1,0.4,1,1v6.7\n                                                C42.6,39.7,42.2,40.1,41.6,40.1z", 1, "st2"], ["id", "XMLID_42_", "d", "M41.6,54.2h-5.8c-0.6,0-1-0.4-1-1v-6.7c0-0.6,0.4-1,1-1h5.8c0.6,0,1,0.4,1,1v6.7\n                                                C42.6,53.8,42.2,54.2,41.6,54.2z", 1, "st2"], ["id", "XMLID_41_", "d", "M23.4,46.2l25,17.8c0.3,0.2,0.7,0.2,1.1,0l26.8-19.8l-3.3,30.9H27.7L23.4,46.2z", 1, "st1"], ["id", "XMLID_40_", "d", "M74.9,45.2L49.5,63.5c-0.3,0.2-0.7,0.2-1.1,0L23.2,45.2", 1, "st3"], [1, "text-muted", "mt-2"], [1, "d-grid"], [1, "btn", "btn-primary", "waves-effect", "waves-light", "mt-3", 3, "routerLink"]], template: function ConfirmacionComponent_Template(rf, ctx) {
    if (rf & 1) {
      i08.\u0275\u0275elementStart(0, "div", 0)(1, "div", 1)(2, "div", 2)(3, "div", 3)(4, "div", 4)(5, "div", 5)(6, "div", 6)(7, "div", 7)(8, "a", 8)(9, "span", 9);
      i08.\u0275\u0275element(10, "img", 10);
      i08.\u0275\u0275elementEnd()()()();
      i08.\u0275\u0275elementStart(11, "div", 11);
      i08.\u0275\u0275namespaceSVG();
      i08.\u0275\u0275elementStart(12, "svg", 12)(13, "style", 13);
      i08.\u0275\u0275text(14, " .st0{fill:#FFFFFF;} .st1{fill:#1abc9c;} .st2{fill:#FFFFFF;stroke:#1abc9c;stroke-width:2;stroke-miterlimit:10;} .st3{fill:none;stroke:#FFFFFF;stroke-width:2;stroke-linecap:round;stroke-miterlimit:10;} ");
      i08.\u0275\u0275elementEnd();
      i08.\u0275\u0275elementStart(15, "g", 14);
      i08.\u0275\u0275element(16, "circle", 15);
      i08.\u0275\u0275elementStart(17, "g", 16);
      i08.\u0275\u0275element(18, "path", 17)(19, "path", 18)(20, "path", 19)(21, "path", 20)(22, "path", 21)(23, "path", 22)(24, "path", 23)(25, "path", 24)(26, "path", 25)(27, "path", 26);
      i08.\u0275\u0275elementEnd()()();
      i08.\u0275\u0275namespaceHTML();
      i08.\u0275\u0275elementStart(28, "h3");
      i08.\u0275\u0275text(29, "Conforme !");
      i08.\u0275\u0275elementEnd();
      i08.\u0275\u0275elementStart(30, "p", 27);
      i08.\u0275\u0275text(31, " Gracias por su ayuda. ");
      i08.\u0275\u0275elementEnd();
      i08.\u0275\u0275elementStart(32, "div", 28)(33, "button", 29);
      i08.\u0275\u0275text(34, " Regresa al inicio ");
      i08.\u0275\u0275elementEnd()()()()()()()()();
    }
    if (rf & 2) {
      i08.\u0275\u0275advance(33);
      i08.\u0275\u0275property("routerLink", i08.\u0275\u0275pureFunction0(1, _c02));
    }
  }, dependencies: [RouterModule2, i15.RouterLink] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i08.\u0275setClassDebugInfo(ConfirmacionComponent, { className: "ConfirmacionComponent", filePath: "src\\app\\pages\\confirmacion\\confirmacion.component.ts", lineNumber: 11 });
})();

// src/app/app.routes.ts
var routes = [
  { path: "", component: HomeComponent },
  { path: "register", component: RegistroComponent },
  { path: "confirmacion", component: ConfirmacionComponent }
];

// src/app/app.config.ts
import { provideClientHydration } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_platform-browser.js?v=8b29cb1e";
import { provideAnimationsAsync } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_platform-browser_animations_async.js?v=8b29cb1e";
import { provideHttpClient } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_common_http.js?v=8b29cb1e";
import { GoogleMapsModule as GoogleMapsModule2 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_google-maps.js?v=8b29cb1e";
var appConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(), provideAnimationsAsync(), provideHttpClient(), GoogleMapsModule2]
};

// src/app/app.component.ts
import { Component as Component4 } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
import { RouterOutlet } from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_router.js?v=8b29cb1e";
import * as i09 from "/@fs/E:/MTC/FrontEnd/ESEG/ESEG/.angular/cache/18.2.12/ESEG/vite/deps/@angular_core.js?v=8b29cb1e";
var AppComponent = class _AppComponent {
  title = "ESEG";
  static \u0275fac = function AppComponent_Factory(__ngFactoryType__) {
    return new (__ngFactoryType__ || _AppComponent)();
  };
  static \u0275cmp = /* @__PURE__ */ i09.\u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], standalone: true, features: [i09.\u0275\u0275StandaloneFeature], decls: 1, vars: 0, template: function AppComponent_Template(rf, ctx) {
    if (rf & 1) {
      i09.\u0275\u0275element(0, "router-outlet");
    }
  }, dependencies: [RouterOutlet] });
};
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && i09.\u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 13 });
})();

// src/main.ts
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));


//# sourceMappingURL=data:application/json;base64,